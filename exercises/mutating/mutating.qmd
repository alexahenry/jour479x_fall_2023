# Mutating data

One of the most common data analysis techniques is to look at change over time. The most common way of comparing change over time is through percent change. The math behind calculating percent change is very simple, and you should know it off the top of your head. The easy way to remember it is:

`(new - old) / old`

Or new minus old divided by old. Your new number minus the old number, the result of which is divided by the old number. To do that in R, we can use `dplyr` and `mutate` to calculate new metrics in a new field using existing fields of data.

So first we'll import the tidyverse so we can read in our data and begin to work with it. Go ahead and do that:

```{r}
#| warning: false
#| message: false
library(tidyverse)
```

Now you'll need a common and simple dataset of total attendance at NCAA football games over the last few seasons.

```{r}
#| warning: false
#| message: false
#| results: asis
#| echo: false
library(downloadthis)
library(glue)

dllink <- download_link(
  link = "https://dwillis.github.io/sports-data-files/attendance.csv",
  button_label = "Download csv file",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

glue("<pre><p><strong>For this walkthrough:</strong></p><p>{dllink}</p></pre>")

```

You'll import it something like this.

```{r}
attendance <- read_csv('data/attendance.csv')
```

If you want to see the first six rows -- handy to take a peek at your data -- you can use the function `head`.

```{r}
head(attendance)
```

What's one thing you notice about the data that might make year-over-year comparisons more complex?

**Answer** Some rows have N/A which can make it hard to compare from school to school and year to year. 

The code to calculate percent change is pretty simple. Remember, with `summarize`, we used `n()` to count things. With `mutate`, we use very similar syntax to calculate a new value using other values in our dataset. So in this case, we're trying to do (new-old)/old, but we're doing it with fields. If we look at what we got when we did `head`, you'll see there's \`2022\` as the new data, and we'll use \`2021\` as the old data. So we're looking at one year. Then, to help us, we'll use arrange again to sort it, so we get the fastest growing school over one year.

```{r}
attendance |> mutate(
  change = (`2022` - `2021`)/`2021`
) 
```
What do we see right away? Do those numbers look like we expect them to? No. They're a decimal expressed as a percentage. So let's fix that by multiplying by 100. 

```{r}
attendance |> mutate(
  change = ((`2022` - `2021`)/`2021`)*100
) 
```
Now, does this ordering do anything for us? No. Let's fix that with arrange. 

```{r}
attendance |> mutate(
  change = ((`2022` - `2021`)/`2021`)*100
) |> arrange(desc(change))
```

Who had the most growth in 2022 compared to the year before? What could account for that change? And what team(s) are the most interesting here?

**Answer** The normal answer would be FIU, Hawaii or San Diego St. however FIU had 0 which produced an infinite results. As discussed in class, Hawaii and San Diego played in different stadiums so that could inflate their numbers a little bit. I would have to agree with what was said in class that Tulane had the actual change in attendance considering they did make a bowl game last year. I'm surprised about New Mexico St. I wouldn't think of New Mexico as a place that people would create a football culture. But maybe it's in the same situation as a Nebraska where there's nothing else to do out there. 

## Back to women's soccer

Let's turn back to the women's soccer match data from this season.

Import it like this:

```{r}
matches_2023 <- read_csv("https://raw.githubusercontent.com/dwillis/NCAAWomensSoccerData/main/data/ncaa_womens_soccer_matchstats_2023.csv")
```

Previously we calculated totals for shots attempted and shots on goal for each time. Now let's do shots on goal and goals, using group_by() and summarize(), and then we'll use mutate to add a percentage to that and see what stands out.

```{r}
matches_2023 |> 
   filter(team == 'Penn St. Nittany Lions') |>
  group_by(team) |> 
  summarise(
    total_on_goal = sum(so_g),
    total_goals = sum(goals)
  ) |> 
  mutate(percent = total_on_goal/total_goals) |> 
  arrange(desc(percent))
matches_2023 |> 
   filter(team == 'Maryland Terrapins, Terps') |>
  group_by(team) |> 
  summarise(
    total_on_goal = sum(so_g),
    total_goals = sum(goals)
  ) |> 
  mutate(percent = total_on_goal/total_goals) |> 
  arrange(desc(percent))
```

What stands out to you here? Describe that below. Would you narrow down the results to certain teams based on the data? If so, do that in the code and explain why you did it below. Finally, what's the most interesting result to you that could be a story?

**Answer** Again, the infinite results stand out to me and also if the team makes one or two goals the entire year, that inflates their percentage. It's just crazy to me because how can, as a team, only make 1 goal? That just seems odd to me. If I had to think about it, I would definitely want to look more into why that is happening. If I had to change the code, I would filter it by teams and compare the two so like Maryland v. Penn State for example and then compare those percentages over the past few games. (p.s. I wasn't sure how to compare teams so I did it the long way.)